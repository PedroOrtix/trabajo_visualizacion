})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = "Sexo")) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = Sexo)) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = genero)) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = [1, 2])) +
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = "blue")) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion)) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes_string(x = "Edad", fill = input$eje_y_dispersion)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes(x = "Edad", y = input$eje_y_dispersion, color=Sexo)) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = "Sexo")) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = "Sexo")) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = "Sexo")) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
output$dispersion <- renderPlot({
# Crear gráfico de dispersión
ggplot(datos_completos, aes_string(x = "Edad", y = input$eje_y_dispersion, color = Sexo)) +
geom_point() +
labs(title = "Gráfico de dispersión", x = "Edad", y = input$eje_y_dispersion)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, color = "Sexo") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
})
output$histograma <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear histograma
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, color = "Sexo") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
# Widgets de entrada
selectInput("tipo_sangrado", "Tipo de sangrado", choices = c("Todos", unique(datos_completos$"Tipo de sangrado"))),
selectInput("gravedad_timi", "Gravedad TIMI", choices = c("Todos", unique(datos_completos$"Gravedad de la hemorragia (TIMI)"))),
selectInput("gravedad_gusto", "Gravedad GUSTO", choices = c("Todos", unique(datos_completos$"Gravedad de la hemorragia (GUSTO)"))),
selectInput("gravedad_barc", "Gravedad BARC", choices = c("Todos", unique(datos_completos$"Gravedad de la hemorragia (BARC)"))),
sliderInput("edad", "Edad", min = 0, max = 120, value = c(0, 120)),
selectInput("genero", "Género", choices = c("Todos", "MALE", "FEMALE"))
),
mainPanel(
# Salida de la visualización
plotOutput("histograma")
)
)
)
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
# Widgets de entrada
selectInput("tipo_sangrado", "Tipo de sangrado", choices = c("Todos", unique(datos_completos$"Tipo de sangrado"))),
selectInput("gravedad_timi", "Gravedad TIMI", choices = c("Todos", unique(datos_completos$"Gravedad de la hemorragia (TIMI)"))),
selectInput("gravedad_gusto", "Gravedad GUSTO", choices = c("Todos", unique(datos_completos$"Gravedad de la hemorragia (GUSTO)"))),
selectInput("gravedad_barc", "Gravedad BARC", choices = c("Todos", unique(datos_completos$"Gravedad de la hemorragia (BARC)"))),
sliderInput("edad", "Edad", min = 0, max = 120, value = c(0, 120)),
selectInput("genero", "Género", choices = c("Todos", "MALE", "FEMALE"))
),
mainPanel(
# Salida de la visualización
plotOutput("grafico")
)
)
)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
}
shinyApp(ui = ui, server = server)
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = Sexo) +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
o
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "Sexo") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = Sexo) +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
Sexo <- unique(datos_completos$"Sexo")
shinyApp(ui = ui, server = server)
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, fill = Sexo, color = Sexo) +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
Sexo <- unique(datos_completos$"Sexo")
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 5, fill = "#C5B0D5", color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear visualización gráfica
ggplot(datos_filtrados, aes(x = Edad)) +
geom_histogram(binwidth = 1, fill = "#C5B0D5", color = "black") +
labs(title = "Distribución de la edad de los pacientes", x = "Edad", y = "Frecuencia")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear visualización gráfica (scatter plot)
plot(datos_filtrados$Edad, datos_filtrados$Variable_de_interes,
xlab = "Edad", ylab = "Variable de interés",
main = "Gráfico de dispersión de eventos de cardiología")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Crear visualización gráfica (scatter plot)
plot(datos_filtrados$Variable_de_interes, datos_filtrados$Edad,
xlab = "Edad", ylab = "Variable de interés",
main = "Gráfico de dispersión de eventos de cardiología")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Calcular la frecuencia de eventos por edad
frecuencia_por_edad <- datos_filtrados %>%
group_by(Edad) %>%
summarise(Frecuencia = n())
## Crear visualización gráfica (scatter plot)
ggplot(frecuencia_por_edad, aes(x = Edad, y = Frecuencia)) +
geom_point() +
labs(x = "Edad", y = "Frecuencia", title = "Frecuencia de eventos de cardiología por edad")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$grafico <- renderPlot({
# Filtrar datos según las entradas del usuario
datos_filtrados <- datos_completos %>%
filter(
(input$tipo_sangrado == "Todos" | `Tipo de sangrado` == input$tipo_sangrado) &
(input$gravedad_timi == "Todos" | `Gravedad de la hemorragia (TIMI)` == input$gravedad_timi) &
(input$gravedad_gusto == "Todos" | `Gravedad de la hemorragia (GUSTO)` == input$gravedad_gusto) &
(input$gravedad_barc == "Todos" | `Gravedad de la hemorragia (BARC)` == input$gravedad_barc) &
(Edad >= input$edad[1] & Edad <= input$edad[2]) &
(input$genero == "Todos" | Sexo == input$genero)
)
# Calcular la frecuencia de eventos por edad
frecuencia_por_edad <- datos_filtrados %>%
group_by(Edad) %>%
summarise(Frecuencia = n())
## Crear visualización gráfica (scatter plot)
ggplot(frecuencia_por_edad, aes(x = Edad, y = Frecuencia)) +
geom_point() +
labs(x = "Edad", y = "Frecuencia", title = "Frecuencia de eventos de cardiología por edad")
})
}
shinyApp(ui = ui, server = server)
